# -*- coding: utf-8 -*-
"""Lists and Tuples

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HBEYYlOhzWBxpHw4Aa1ydRL08HUQd9hG
"""

# List is a mutable object, meaning that it can be changed after it is created
# Tuple is an immutable object, meaning that it can not be changed after it is created
# Set is unique object, meaning it is immutable and unordered

import copy

# Declare collections
li = ["cherry", "apple", "banana"]
tup = (3, 1, 2)
sett = {"aryan", "inamdar", 15}

# Looping Through Elements in a Collection
print("Looping Through Elements in a Collection:")
print("#1, List")
for i in li:
  print(i)
print("\n#1, Tuple")
for i in tup:
  print(i)
print("\n#1, Set")
for i in sett:
  print(i)

print("\n#2, List")
print(li[1])
print("\n#2, Tuple")
print(tup[0])
print("\n#2, Set")
print("You can't access an element in a set by index because the elements are organized randomly")

print("\n#3, List")
print(li)
print("\n#3, Tuple")
print(tup)
print("\n#3, Set")
print(sett)

print("\n#4, List")
print(len(li))
print("\n#4, Tuple")
print(len(tup))
print("\n#4, Set")
print(len(sett))

# Modifying Collections
print("\nModifying Collections:")
print("Because lists are mutable, all modifying commands will work with lists (answer is yes for all of them")
print("Because tuples are immutable, no modifying commands will work with tuples (answer is no for all of them")
print("Once a set is created, you cannot change its items, but you can add new items. This means that only number 1 and 3 will work. The rest will yield an error")

print("\n#1, Set")
sett.add("element")
print(sett)

print("\n#3, Set")
print("Same as number 1")

# Membership Verification
print("\nMembership Verification:")
print("#1, List")
if "apple" in li:
  print("Element Exists")

print("\n#1, Tuple")
if 3 in tup:
  print("Element Exists")

print("\n#1, Set")
if "aryan" in sett:
  print("Element exists")

print("\n#2, List")
print(li.count("apple"))

print("\n#2, Tuple")
print(tup.count(3))

print("\n#2, Set")
print("This operation will not work because you can't access a collection by index")

print("\n#3, List")
if "apple" in li:
  print(li.index("apple"))

print("\n#3, Tuple")
if 3 in tup:
  print(tup.index(3))

print("\n#3, Set")
print("This operation will not work because you can't access a collection by index")

# Operations on two Collections
print("\nOperations on two Collections:")
print("#1, List")
print(li + li)

print("\n#1, Tuple")
print(tup + tup)

print("\n#1, Set")
sett2 = {1, 2, 3}
sett.update(sett2)
print(sett)

print("\n#2, List")
print(li * 2)

print("\n#2, Tuple")
print(tup * 2)

print("\n#2, Set")
print("you cannot directly add elements to a set without using add() or update()")

print("\n#3, List")
list1 = [1, 2, 3]
zipped_list = zip(li, list1)
new_list = list(zipped_list)
print(new_list)

print("\n#3, Tuple")
tup1 = (1, 2, 3)
zipped_tup = zip(tup, tup1)
new_tup = list(zipped_tup)
print(new_tup)

print("\n#3, Set")
print("you cannot directly add elements to a set without using add() or update()")

# Copying Collections
print("\nCopying Collections:")
print("#1, List")
copied_list = copy.copy(li)
print(copied_list)

print("\n#1, Tuple")
copied_tup = copy.copy(tup)
print(copied_tup)

print("\n#1, Set")
newset = sett.copy()
print(newset)

print("\n#2, List")
old_list = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
new_copied_list = copy.deepcopy(old_list)
print(new_copied_list)

print("\n#2, Tuple")
old_tup = ([1, 1, 1], [2, 2, 2], [3, 3, 3])
new_copied_tup = copy.deepcopy(old_tup)
print(new_copied_tup)

print("\n#2, Set")
print("Lists cannot be added within a set, making deepcopy impossible")

# Sorting Collections
print("\nSorting Collections:")
print("#1, List")
li.sort()
print(li)

print("\n#1, Tuple")
new_tuple_list = sorted(tup)
print(new_tuple_list)

print("\n#1, Set")
print("You cannot sort set elements because they are random")

print("\n#2, List")
li.reverse()
print(li)

print("\n#2, Tuple")
tup = tuple(reversed(tup))
print(tup)

print("\n#2, Set")
print("You cannot sort set elements because they are random")

# Arithmetic Operations on Collections
print("\nArithmetic Operations on Collections")
print("#1, List")
print(max(li))

print("\n#1, Tuple")
print(max(tup))

print("\n#1, Set")
print("Returns error because set has not attribute max")

print("\n#2, List")
example = [1, 2, 3]
print(sum(example))

print("\n#2, Tuple")
print(sum(tup))

print("\n#2, Set")
print("Returns error because set has not attribute sum")

print("\n#3, List")
print(min(li))

print("\n#3, Tuple")
print(min(tup))

print("\n#3, Set")
print("Returns error because set has not attribute min")