# -*- coding: utf-8 -*-
"""Reciprocals and deriving repeating digits from nums in a list

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHl3FCIPvGJ9cY5GfSdmBRuaqul6Z8ng
"""

# Problem 1
import math
def least_common_multiple_of_list_of_numbers(list_of_numbers):
  lcm = list_of_numbers[0]
  for i in range(1,len(list_of_numbers)):
    lcm = lcm*list_of_numbers[i]//math.gcd(lcm, list_of_numbers[i])
  print(lcm)
  
numbers = [4, 5, 6, 7]
print("Problem #1")
least_common_multiple_of_list_of_numbers(numbers)

# Probem 2
def reciprocal_of_a_number(integer):
  recip = 1/integer
  recip = str(recip)
  list_of_digits = [char for char in recip]
  print(list_of_digits)

print("\nProblem #2")
reciprocal_of_a_number(1)
reciprocal_of_a_number(2)
reciprocal_of_a_number(3)
reciprocal_of_a_number(4)
reciprocal_of_a_number(5)
reciprocal_of_a_number(6)
reciprocal_of_a_number(7)
reciprocal_of_a_number(8)
reciprocal_of_a_number(9)
reciprocal_of_a_number(10)

# Problem 3
list_of_recips = []

def countDuplicates(listt): 
    list_of_duplicates = []
    for r in listt:
      list_of_duplicates.append(listt.count(r))
    set_of_duplicates = set(list_of_duplicates)
    return len(set_of_duplicates)

for num in range(1, 10000):
  recip = 1/num
  STRreciprocal = str(recip)
  STRreciprocal.replace('.','')
  list_of_digits_of_reciprocal = [char for char in STRreciprocal]
  if (countDuplicates(list_of_digits_of_reciprocal) >= 5):
    list_of_recips.append(recip)

print("\nProblem #3")
print(list_of_recips)
print("Within this list, there are multiple numbers with up to 6 repeating digits")